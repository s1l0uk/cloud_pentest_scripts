#!/usr/bin/env python
# -*- coding: utf-8 -*-

import boto3
import botocore
import random
import string
from cli.log import LoggingApp

DESCRIPTION = """
This script takes in a valid AWS account ID and tries to enumerate existing
IAM users within that account. It does so by trying to update the
AssumeRole policy document of the role that you pass into --role-name.
For your safety, it updates the policy with an explicit deny against the
AWS account/IAM user, so that no security holes are opened in your
account during enumeration. NOTE: It is recommended to use personal
AWS access keys for this script, as it will spam CloudTrail with
"iam:UpdateAssumeRolePolicy" logs. The target account will not see
anything in their logs though! The keys used must have the
iam:UpdateAssumeRolePolicy permission on the role that you pass
into --role-name to be able to identify a valid IAM user.
"""


class EnumeratRoles(LoggingApp):

    attempts = 0
    restricted_roles = []
    successful_role_arn = ''
    word_list = []
    connection = None

    def random_string(self):
        return ''.join(
            random.choice(
                string.ascii_lowercase +
                string.ascii_uppercase +
                string.digits
            ) for _ in range(20)
        )

    def make_wordlist(self):
        quit("TODO: Implement Brute-force/Dictionary Attack")
        return None

    def get_wordlist(self, wordlist_path):
        with open(wordlist_path, 'r') as f:
            word_list = f.read().splitlines()
        return word_list

    def get_connection(self, profile):
        if profile:
            try:
                session = boto3.session.Session(
                    profile_name=self.params.profile
                )
            except botocore.exceptions.ProfileNotFound as e:
                self.log.warning(
                    'Cannot find the AWS profile: {}'.format(profile)
                )
                self.log.debug(e)
                session = boto3.session.Session()
                self.log.error(
                    'Available Profiles: {}'.format(session.available_profiles)
                )
                quit('Quitting!')
            client = session.client('iam')
        else:
            session = boto3.session.Session()
            self.log.warning(
                'No AWS Profile - choose one or add the --profile argument:'
            )
            profiles = session.available_profiles
            for i in range(0, len(profiles)):
                print('[{}] {}'.format(i, profiles[i]))
            profile_number = int(input(
                'Choose a profile (Ctrl+C to exit): '
            ).strip())
            session = boto3.session.Session(
                profile_name=profiles[profile_number]
            )
            client = session.client('iam')
        return client

    def main(self):   # pylint: disable=E0202
        self.account_id = self.params.accountid
        if not len(self.account_id) == 12 or not self.account_id.isdigit():
            quit(
                'AWS account IDs are 12 digits. You supplied: {}'.format(
                    self.params.accountid
                )
            )
        if not self.params.self_check and not self.params.role_name:
            quit(
                'role-name is required if using the self-check option.'
            )
        elif self.params.self_check:
            self.log.warning(
                'Ensure your role has sts:AssumeRole and  * on resources'
            )
        if self.params.wordlist:
            self.word_list = self.get_wordlist(self.params.wordlist)
        else:
            self.word_list = self.make_wordlist()
        self.connection = self.get_client(self.params.profile)
        self.log.info('Targeting account ID: {}'.format(self.params.accountid))
        self.log.info('Starting role enumeration')
        if self.params.self_check:
            r = self.self_check(self.connection)
        else:
            r = self.enumerate(self.word_list, self.connection)
        if self.params.self_check:
            self.log.warning('Users with MFA')
            for u in r['with_mfa']:
                self.log.warning(u)
            self.log.warning('Users without MFA')
            for u in r['without_mfa']:
                self.log.warning(u)
        else:
            self.log.warning('Users found:')
            for u in r:
                self.log.warning(u)
        self.log.warning(
            'Enumerator completed after {} attempts.'.format(
                self.attempts
            )
        )

    def enumerate(self, client, word_list):
        results = []
        for word in word_list:
            user_arn = 'arn:aws:iam::{}:user/{}'.format(
                self.params.accountid, word
            )
            self.attempts += 1
            try:
                client.update_assume_role_policy(
                    RoleName=self.params.rolename,
                    PolicyDocument=self.params.policydoc.format(
                        user_arn
                    )
                )
                self.log.debug("User Exists: " + user_arn)
                results.append(user_arn)
            except botocore.exceptions.ClientError as e:
                if 'MalformedPolicyDocument' in str(e):
                    # User doesn't exist, continue on
                    self.log.debug("User does not exist: " + user_arn)
                elif 'NoSuchEntity' in str(e):
                    quit('Role Name invalid.')
                else:
                    quit('Unhandled error: {}'.format(str(e)))

    def self_check(self, client):
        users = []
        with_mfa = []
        self.log.info('Self-Checking the current account')
        response = client.list_users()
        users.extend(response['Users'])
        while 'IsTruncated' in response and response['IsTruncated'] is True:
            response = client.list_users(
                Marker=response['Marker']
            )
            users.extend(response['Users'])
        self.log.info('Found {} users.'.format(len(users)))
        for user in users:
            response = client.list_mfa_devices(
                UserName=user['UserName']
            )
            if 'MFADevices' in response and response['MFADevices']:
                if response['MFADevices'][0]['UserName'] == user['UserName']:
                    with_mfa.append(user['UserName'])
                    self.log.debug('  {}: Yes'.format(user['UserName']))
                    continue
            self.log.debug('  {}: NO!'.format(user['UserName']))
        return {
            "users": users,
            "with_mfa": with_mfa,
            "without_mfa": filter('', [
                u if u not in with_mfa else ''
                for u in users
            ])
        }


if __name__ == '__main__':
    app = EnumeratRoles(
        name="Enumerate AWS Users",
        message_format='%(asctime)s [%(filename)s:%(lineno)s] - %(message)s',
        description=DESCRIPTION
    )
    app.add_param(
        '-p', '--profile', required=False, default=None,
        help='AWS CLI profile to use. You will be prompted by default.'
    )
    app.add_param(
        '-w', '--wordlist', required=False, default=None,
        help='File path to a word list to use. TODO: Bruteforce/dictionary'
    )
    app.add_param(
        '-a', '--accountid', required=True,
        help='ID of the target AWS account (12 digits).'
    )
    app.add_param(
        '-p', '--policydoc', required=True,
        help='A Policy Document to deploy for test - can cause harm to the environment',
        default='{{"Version":"2012-10-17","Statement":[{{"Effect":"Deny","Principal":{{"AWS":"{}"}},"Action":"sts:AssumeRole"}}]}}'
    )
    app.add_param(
        '-1', '--findfirst', required=False, default=False, action='store_true',
        help='If set to True will find the first account and exit',
    )
    app.add_param(
        '-s', '--self-check', required=False, default=False, action='store_true',
        help='Perform a self check against your own AWS account. This flag will skip the bruteforcing and instead list out all IAM users in your account and whether or not they have MFA enabled. This will give you an idea of potential targets in your account and how vulnerable they are to an attack of this kind.'
    )
    app.add_param(
        '-r', '--role-name', required=False, default=None,
        help='The name of a valid role in the current users account to try and update the AssumeRole policy document for.'
    )
    app.run()
